version: '2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - fintech
  kafka:
    build:
      context: .
      dockerfile: Dockerfile.kafka
    container_name: kafka
    ports:
     - "9092:9092"
    environment:
     KAFKA_BROKER_ID: 1
     KAFKA_ADVERTISED_HOST_NAME: kafka
     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    networks:
     - fintech
  api:
    build: ../api  # Dockerfile이 위치한 경로
    image: fintech-api:1.0.0
    container_name: api
    ports:
      - "80:80"
    networks:
      - fintech
  consumer:
    build: ../consumer  # Dockerfile이 위치한 경로
    image: fintech-consumer:1.0.0
    container_name: consumer
    ports:
      - "8080:8080"
    networks:
      - fintech
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  css:
    build: ../css  # Dockerfile이 위치한 경로
    image: fintech-css:1.0.0
    container_name: css
    ports:
      - "8081:8081"
    networks:
      - fintech
  nginx:
    build: ../nginx  # Dockerfile이 위치한 경로
    image: nginx:1.0.0
    container_name: nginx
    ports:
      - "8085:8085"
    networks:
      - fintech

  mysql:
    image: mysql:latest
    container_name: fintech-mysql
    environment:
      MYSQL_ROOT_PASSWORD: fintech
      MYSQL_DATABASE: fintech
      MYSQL_USER: fintech
      MYSQL_PASSWORD: fintech
    ports:
      - "3306:3306"
    networks:
      - fintech

  redis:
     image: redis:latest
     container_name: fintech-redis
     ports:
       - "6379:6379"
     networks:
       - fintech

networks:
  fintech:
    driver: bridge